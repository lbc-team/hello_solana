import {
    Connection,
    Keypair,
    LAMPORTS_PER_SOL,
    SystemProgram,
    Transaction,
    sendAndConfirmTransaction,
    ComputeBudgetProgram,
  } from "@solana/web3.js";
  import { RPC_ENDPOINT, PAYER_KEYPAIR_PATH } from "./config";
  import fs from "fs";
  
  async function main() {
    // ËøûÊé•Êú¨Âú∞ËäÇÁÇπ
    const connection = new Connection(RPC_ENDPOINT, "confirmed");
  

    const payer1 = Keypair.fromSecretKey(Buffer.from(JSON.parse(fs.readFileSync(PAYER_KEYPAIR_PATH, "utf8"))));
    console.log("payer1 publicKey:", payer1.publicKey.toBase58());
    const payer2 = Keypair.generate();
  
    const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();
  
    const balance = await connection.getBalance(payer1.publicKey);
    console.log("Ë¥¶Êà∑‰ΩôÈ¢ù:", balance / LAMPORTS_PER_SOL, "SOL");
    if (balance < 10 * LAMPORTS_PER_SOL) {
      // Airdrop ‰∏Ä‰∫õ SOL ‰ª•‰æøÊîØ‰ªòÊâãÁª≠Ë¥π
      const airdropSignature = await connection.requestAirdrop(
        payer1.publicKey,
        10 *LAMPORTS_PER_SOL,
      );
      await connection.confirmTransaction({
        signature: airdropSignature,
        blockhash,
        lastValidBlockHeight,
      });
      console.log("Airdrop ÂÆåÊàê");
    }

    const ix = SystemProgram.transfer({
        fromPubkey: payer1.publicKey,
        toPubkey: payer2.publicKey,
        lamports: LAMPORTS_PER_SOL,
    });

    // ËÆæÁΩÆËÆ°ÁÆóÂçïÂÖÉÈôêÂà∂ÔºàÈªòËÆ§ËΩ¨Ë¥¶ÈúÄË¶ÅÁ∫¶200-300‰∏™ÂçïÂÖÉÔºâ
    const computeUnitIx = ComputeBudgetProgram.setComputeUnitLimit({
        units: 1000,  // 1000 ‰∏™ËÆ°ÁÆóÂçïÂÖÉ
    });

    // ËÆæÁΩÆ‰ºòÂÖàÁ∫ßË¥πÁî®ÔºàÂèØÈÄâ - ËÆ©‰∫§ÊòìÊõ¥Âø´Ë¢´Â§ÑÁêÜÔºâ
    // 1 Lamport = 1,000,000 microLamports
    const priorityFeeIx = ComputeBudgetProgram.setComputeUnitPrice({
        microLamports: 1000,  // ÊØè‰∏™ËÆ°ÁÆóÂçïÂÖÉÊîØ‰ªò 1000 microLamports
    });

    const tx = new Transaction()
        .add(computeUnitIx)      // ÂÖàËÆæÁΩÆËÆ°ÁÆóÈ¢ÑÁÆó
        .add(priorityFeeIx)      // ÂÜçËÆæÁΩÆ‰ºòÂÖàÁ∫ßË¥πÁî®
        .add(ix);                // ÊúÄÂêéÊ∑ªÂä†ÂÆûÈôÖÊåá‰ª§

    const simulation = await connection.simulateTransaction(tx, [payer1]);
    console.log("Ê®°ÊãüÊâßË°åÁªìÊûú:", simulation.value.err ? "Â§±Ë¥•" : "ÊàêÂäü");
    
    // üìä Ëé∑ÂèñÂÆûÈôÖÊ∂àËÄóÁöÑËÆ°ÁÆóÂçïÂÖÉ
    if (simulation.value.unitsConsumed) {
        console.log(`üíª ÂÆûÈôÖÊ∂àËÄó CU: ${simulation.value.unitsConsumed}`);
        console.log(`üí∏ ‰ºòÂÖàÁ∫ßË¥πÁî® (CU * priorityFee): ${1000 * 1000} microLamports`);
    }
    
    const sig = await sendAndConfirmTransaction(connection, tx, [payer1]);
    console.log("Transaction Signature", sig);

    const balance2 = await connection.getBalance(payer1.publicKey);
    console.log("Ë¥¶Êà∑‰ΩôÈ¢ù:", balance2 / LAMPORTS_PER_SOL, "SOL");
 
  }
  
  main().catch(console.error); 